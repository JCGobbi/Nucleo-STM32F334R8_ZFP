--  This project file was generated by the Ada_Drivers_Library project wizard script
library project Ada_Drivers_Library is

   type Build_Type is ("Debug", "Production");
   Build : Build_Type := external ("ADL_BUILD", "Production");

   type Build_Checks_Type is ("Disabled", "Enabled");
   Build_Checks : Build_Checks_Type := external ("ADL_BUILD_CHECKS", "Enabled");

   --  Target architecture and runtime
   Target := Project'Target;
   for Runtime ("Ada") use Project'Runtime ("Ada");

   --  Callgraph info is not available on all architectures
   Callgraph_Switch := ();
   case Target is
      when "riscv32-unknown-elf" => null;
      when others => Callgraph_Switch := ("-fcallgraph-info=su");
   end case;

   Build_Checks_Switches := ();
   case Build_Checks is
      when "Disabled" => null;
      when others =>
         Build_Checks_Switches :=
           ("-gnaty", "-gnatyM120", "-gnatyO", --  Style checks
            "-gnatwe"); --  Warnings as errors
   end case;

   package Compiler is
      case Build is
         when "Production" =>
            for Default_Switches ("Ada") use
              ("-O3",     --  Optimization level 3
               --  "-Os",     --  Optimization for size (may be necessary)
               "-gnatp",  --  Supress checks
               "-gnatn"); --  Enable inlining
         when "Debug" =>
            for Default_Switches ("Ada") use
              ("-O0",    --  No optimization
               "-gnata") --  Enable assertions
              & Callgraph_Switch;
      end case;

      for Default_Switches ("Ada") use Compiler'Default_Switches ("Ada") &
        Callgraph_Switch &
        Build_Checks_Switches &
        ("-g",       --  Debug info
         "-gnatwa",  --  All warnings
         "-gnatw_A", --  Turn off warnings for anonymous allocators
         "-gnatQ",   --  Don't quit. Generate ALI and tree files even if illegalities
         "-gnatw.X", --  Disable warnings for No_Exception_Propagation
         "-ffunction-sections", --  Create a linker section for each function
         "-fdata-sections");  --  Create a linker section for each data
   end Compiler;

   --  crt0.S is inside ADL/src, so we need to compile assembly code
   for Languages use ("Ada", "Asm_CPP");
   for Create_Missing_Dirs use "True";
   for Object_Dir use "obj_" & Build;
   for Library_Dir use "obj_lib_" & Build;
   for Library_Kind use "static";
   for Library_Name use "ada_drivers_library";

   package Device_Configuration is
      for CPU_Name use "ARM Cortex-M4F";
      for Number_Of_Interrupts use "125";
      for Interrupt ("0") use "adl_irq";
      for Interrupt ("1") use "adl_irq";
      for Interrupt ("2") use "adl_irq";
      for Interrupt ("3") use "adl_irq";
      for Interrupt ("4") use "adl_irq";
      for Interrupt ("5") use "adl_irq";
      for Interrupt ("6") use "adl_irq";
      for Interrupt ("7") use "adl_irq";
      for Interrupt ("8") use "adl_irq";
      for Interrupt ("9") use "adl_irq";
      for Interrupt ("10") use "adl_irq";
      for Interrupt ("11") use "adl_irq";
      for Interrupt ("12") use "adl_irq";
      for Interrupt ("13") use "adl_irq";
      for Interrupt ("14") use "adl_irq";
      for Interrupt ("15") use "adl_irq";
      for Interrupt ("16") use "adl_irq";
      for Interrupt ("17") use "adl_irq";
      for Interrupt ("18") use "adl_irq";
      for Interrupt ("19") use "adl_irq";
      for Interrupt ("20") use "adl_irq";
      for Interrupt ("21") use "adl_irq";
      for Interrupt ("22") use "adl_irq";
      for Interrupt ("23") use "adl_irq";
      for Interrupt ("24") use "adl_irq";
      for Interrupt ("25") use "adl_irq";
      for Interrupt ("26") use "adl_irq";
      for Interrupt ("27") use "adl_irq";
      for Interrupt ("28") use "adl_irq";
      for Interrupt ("29") use "adl_irq";
      for Interrupt ("30") use "adl_irq";
      for Interrupt ("31") use "adl_irq";
      for Interrupt ("32") use "adl_irq";
      for Interrupt ("33") use "adl_irq";
      for Interrupt ("34") use "adl_irq";
      for Interrupt ("35") use "adl_irq";
      for Interrupt ("36") use "adl_irq";
      for Interrupt ("37") use "adl_irq";
      for Interrupt ("38") use "adl_irq";
      for Interrupt ("39") use "adl_irq";
      for Interrupt ("40") use "adl_irq";
      for Interrupt ("41") use "adl_irq";
      for Interrupt ("42") use "adl_irq";
      for Interrupt ("43") use "adl_irq";
      for Interrupt ("44") use "adl_irq";
      for Interrupt ("45") use "adl_irq";
      for Interrupt ("46") use "adl_irq";
      for Interrupt ("47") use "adl_irq";
      for Interrupt ("48") use "adl_irq";
      for Interrupt ("49") use "adl_irq";
      for Interrupt ("50") use "adl_irq";
      for Interrupt ("51") use "adl_irq";
      for Interrupt ("52") use "adl_irq";
      for Interrupt ("53") use "adl_irq";
      for Interrupt ("54") use "adl_irq";
      for Interrupt ("55") use "adl_irq";
      for Interrupt ("56") use "adl_irq";
      for Interrupt ("57") use "adl_irq";
      for Interrupt ("58") use "adl_irq";
      for Interrupt ("59") use "adl_irq";
      for Interrupt ("60") use "adl_irq";
      for Interrupt ("61") use "adl_irq";
      for Interrupt ("62") use "adl_irq";
      for Interrupt ("63") use "adl_irq";
      for Interrupt ("64") use "adl_irq";
      for Interrupt ("65") use "adl_irq";
      for Interrupt ("66") use "adl_irq";
      for Interrupt ("67") use "adl_irq";
      for Interrupt ("68") use "adl_irq";
      for Interrupt ("69") use "adl_irq";
      for Interrupt ("70") use "adl_irq";
      for Interrupt ("71") use "adl_irq";
      for Interrupt ("72") use "adl_irq";
      for Interrupt ("73") use "adl_irq";
      for Interrupt ("74") use "adl_irq";
      for Interrupt ("75") use "adl_irq";
      for Interrupt ("76") use "adl_irq";
      for Interrupt ("77") use "adl_irq";
      for Interrupt ("78") use "adl_irq";
      for Interrupt ("79") use "adl_irq";
      for Interrupt ("80") use "adl_irq";
      for Interrupt ("81") use "adl_irq";
      for Interrupt ("82") use "adl_irq";
      for Interrupt ("83") use "adl_irq";
      for Interrupt ("84") use "adl_irq";
      for Interrupt ("85") use "adl_irq";
      for Interrupt ("86") use "adl_irq";
      for Interrupt ("87") use "adl_irq";
      for Interrupt ("88") use "adl_irq";
      for Interrupt ("89") use "adl_irq";
      for Interrupt ("90") use "adl_irq";
      for Interrupt ("91") use "adl_irq";
      for Interrupt ("92") use "adl_irq";
      for Interrupt ("93") use "adl_irq";
      for Interrupt ("94") use "adl_irq";
      for Interrupt ("95") use "adl_irq";
      for Interrupt ("96") use "adl_irq";
      for Interrupt ("97") use "adl_irq";
      for Interrupt ("98") use "adl_irq";
      for Interrupt ("99") use "adl_irq";
      for Interrupt ("100") use "adl_irq";
      for Interrupt ("101") use "adl_irq";
      for Interrupt ("102") use "adl_irq";
      for Interrupt ("103") use "adl_irq";
      for Interrupt ("104") use "adl_irq";
      for Interrupt ("105") use "adl_irq";
      for Interrupt ("106") use "adl_irq";
      for Interrupt ("107") use "adl_irq";
      for Interrupt ("108") use "adl_irq";
      for Interrupt ("109") use "adl_irq";
      for Interrupt ("110") use "adl_irq";
      for Interrupt ("111") use "adl_irq";
      for Interrupt ("112") use "adl_irq";
      for Interrupt ("113") use "adl_irq";
      for Interrupt ("114") use "adl_irq";
      for Interrupt ("115") use "adl_irq";
      for Interrupt ("116") use "adl_irq";
      for Interrupt ("117") use "adl_irq";
      for Interrupt ("118") use "adl_irq";
      for Interrupt ("119") use "adl_irq";
      for Interrupt ("120") use "adl_irq";
      for Interrupt ("121") use "adl_irq";
      for Interrupt ("122") use "adl_irq";
      for Interrupt ("123") use "adl_irq";
      for Interrupt ("124") use "adl_irq";

      for Memories use ("flash", "sram", "ccm");

      for Mem_Kind ("flash") use "rom";
      for Address  ("flash") use "0x08000000";
      for Size     ("flash") use "64K";

      for Mem_Kind ("sram") use "ram";
      for Address  ("sram") use "0x20000000";
      for Size     ("sram") use "16K";

      for Mem_Kind ("ccm") use "ram";
      for Address  ("ccm") use "0x10000000";
      for Size     ("ccm") use "4K";

      for Boot_Memory use "flash";
   end Device_Configuration;

   Board                          := "NUCLEO_F334R8";     -- From user input
   Architecture                   := "ARM";               -- From board definition
   Vendor                         := "STMicro";           -- From board definition
   Device_Family                  := "STM32F3";           -- From board definition
   Device_Name                    := "STM32F334xx";       -- From board definition
   CPU_Core                       := "ARM Cortex-M4F";    -- From mcu definition
   High_Speed_External_Clock      := "8_000_000";         -- From board definition
   Number_Of_Interrupts           := "125";               -- From MCU definition
   Has_ZFP_Runtime                := "True";              -- From board definition
   Has_Ravenscar_SFP_Runtime      := "True";              -- From board definition
   Has_Ravenscar_Full_Runtime     := "True";              -- From board definition
   Runtime_Profile                := "light";               -- From user input
   Runtime_Name_Suffix            := "cortex-m4f";        -- From board definition
   Runtime_Name                   := "light-cortex-m4f";    -- From user input
   Use_Startup_Gen                := "True";              -- From user input
   Has_Custom_Memory_Area_1       := "False";             -- From user input
   Boot_Memory                    := "flash";             -- From user input
   Max_Path_Length                := "1024";              -- From user input
   Max_Mount_Points               := "2";                 -- From user input
   Max_Mount_Name_Length          := "128";               -- From user input

   --  Project source directories
   Src_Dirs_Root := "./";
   for Source_Dirs use (
     Src_Dirs_Root & "devices",
     Src_Dirs_Root & "system",
     Src_Dirs_Root & "drivers",
     Src_Dirs_Root & "hal/",
     Src_Dirs_Root & "svd",
     Src_Dirs_Root & "src");

end Ada_Drivers_Library;
